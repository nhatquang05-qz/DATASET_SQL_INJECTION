import requests
import json
import time
import os

class BWAPPPentestTool:
    def __init__(self, base_url, username, password):
        self.base_url = base_url.rstrip('/')
        self.session = requests.Session()
        self.login(username, password)

    def login(self, username, password):
        """Đăng nhập vào bWAPP để lấy session."""
        login_url = f"{self.base_url}/login.php"
        data = {
            'login': username,
            'password': password,
            'security_level': '0',
            'form': 'submit'
        }
        try:
            resp = self.session.post(login_url, data=data, timeout=10)
            if "login.php" in resp.url or resp.status_code != 200:
                print("[!] Đăng nhập bWAPP thất bại.")
            else:
                print("[+] Đăng nhập bWAPP thành công.")
        except Exception as e:
            print(f"[!] Lỗi khi đăng nhập: {e}")

    def get_baseline(self, url):
        """Gửi request mặc định để lấy phản hồi baseline (không chứa SQLi)."""
        try:
            data = {'title': '1', 'action': 'Go'}
            resp = self.session.post(url, data=data, timeout=10)
            return resp.text.lower() if resp.status_code == 200 else ""
        except Exception as e:
            print(f"[!] Không lấy được baseline: {e}")
            return ""

    def test_sqli(self, payloads, output_path="results.json"):
        """
        Thử SQL Injection tại endpoint /sqli_1.php
        Ghi log kết quả chi tiết ra file JSON.
        """
        vuln_path = "/sqli_1.php"
        url = self.base_url + vuln_path
        results = []

        print("[*] Lấy phản hồi baseline...")
        baseline = self.get_baseline(url)

        for item in payloads:
            payload = item["payload"]
            data = {'title': f"1{payload}", 'action': 'Go'}

            print(f"\n[*] Thử payload: {payload}")
            print(f"    - Kỹ thuật: {item.get('technique')}")
            print(f"    - Mục đích: {item.get('purpose')}")
            print(f"    - Mức độ: {item.get('severity')}")
            print(f"    - Mô tả: {item.get('description')}")

            result = {
                "payload": payload,
                "technique": item.get("technique"),
                "purpose": item.get("purpose"),
                "severity": item.get("severity"),
                "description": item.get("description"),
                "status": "unknown",
                "delay": 0,
                "keywords_found": [],
                "response_changed": False
            }

            try:
                start = time.time()
                resp = self.session.post(url, data=data, timeout=15)
                elapsed = time.time() - start
                result["delay"] = round(elapsed, 3)

                if resp.status_code == 200:
                    content = resp.text.lower()

                    # Kiểm tra sự thay đổi so với baseline
                    if content != baseline:
                        result["response_changed"] = True

                    # Kiểm tra từ khóa đáng ngờ
                    suspicious_keywords = ["sql syntax", "mysql", "you have an error", "warning", "user", "password", "ORA-"]
                    found_keywords = [kw for kw in suspicious_keywords if kw in content]
                    result["keywords_found"] = found_keywords

                    # Phân loại kết quả
                    if elapsed > 4.5:
                        result["status"] = "suspicious (time-delay)"
                        print(f"  ==> [!!] Độ trễ {elapsed:.2f}s - nghi vấn time-based SQLi.")
                    elif found_keywords:
                        result["status"] = "suspicious (keywords)"
                        print(f"  ==> [!!] Phát hiện từ khóa nghi vấn: {found_keywords}")
                    elif content != baseline:
                        result["status"] = "suspicious (response changed)"
                        print(f"  ==> [!!] Phản hồi khác baseline.")
                    else:
                        result["status"] = "clean"
                        print("  ==> [-] Không phát hiện bất thường.")
                else:
                    result["status"] = f"http_error_{resp.status_code}"
                    print(f"  ==> [!] HTTP {resp.status_code}")
            except Exception as e:
                result["status"] = "error"
                print(f"  ==> [!] Lỗi khi gửi payload: {e}")

            results.append(result)

        # Ghi log ra file JSON
        try:
            os.makedirs(os.path.dirname(output_path), exist_ok=True)
            with open(output_path, "w", encoding="utf-8") as f:
                json.dump(results, f, ensure_ascii=False, indent=4)
            print(f"\n[+] Đã ghi kết quả vào: {output_path}")
        except Exception as e:
            print(f"[!] Không thể ghi file kết quả: {e}")


def load_payloads_from_json(json_path):
    try:
        with open(json_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"[!] Lỗi khi đọc file JSON: {e}")
        return []

# === Sử dụng công cụ ===
json_file_path = r"D:\SQL_INJECTION\DATASET_SQL_INJECTION\output\bwapp_demo.json"  
output_result_file = r"D:\SQL_INJECTION\DATASET_SQL_INJECTION\results\bwapp_results.json"

payloads = load_payloads_from_json(json_file_path)
bwapp = BWAPPPentestTool("http://localhost/bWAPP", "bee", "bug")
bwapp.test_sqli(payloads, output_path=output_result_file)
